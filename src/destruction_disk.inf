Include ">text/destruction_disk";

Object DestructionDisk "disk"
  has transparent ~open openable container,
  with 
    has_been_taken false,
    has_been_dropped false,
    has_been_opened false,
    has_been_closed false,
    name 'disk' 'disc',
    description [;
      print (string) D_DISK_DESC_COMMON;
      if( self has open )
      {
        print (string) D_DISK_DESC_OPEN;
      }
      else
      {
        print (string) D_DISK_DESC_CLOSED;
      }
      print_ret (string) D_DISK_DESC_KNOB;
    ],
    before [;
      Receive:
        if( self hasnt open )
        {
          print_ret (string) D_DISK_BEFORE_RECEIVE_CLOSED;
        }
        remove noun;
        print_ret 
          "~", (string) RandomAffirmative(),
          (string) D_DISK_BEFORE_RECEIVE_OPEN_0,
          (the) noun,
          (string) D_DISK_BEFORE_RECEIVE_OPEN_1;
      ThrownAt:
        if( self hasnt open)
        {
          move noun to location;
          print (string) D_DISK_BEFORE_THROWNAT_CLOSED;
          < AttemptToDamage noun >;
        }
        else
        {
          remove noun;
          print (string) D_DISK_BEFORE_THROWNAT_OPEN;
        };
        rtrue;

      Open:
        if( self has open )
        {
          print_ret (string) D_DISK_BEFORE_OPEN_OPENED;
        }
      Close:
        if( self hasnt open )
        {
          print_ret (string) D_DISK_BEFORE_CLOSE_CLOSED;
        }
    ],
    after [;
      Take:
        if( self.has_been_taken == false )
        {
          self.has_been_taken = true;
          "~", (string) RandomAffirmative(), 
          (string) D_DISK_AFTER_FIRST_TAKE;
        }
        else
          "~", (string) RandomAffirmative(),
          (string) D_DISK_AFTER_TAKE;
      Drop:
        if( self.has_been_dropped == false )
        {
          self.has_been_dropped = true;
          print_ret (string) D_DISK_AFTER_FIRST_DROP;
        }
        else
        {
          "~", (string) RandomAffirmative(),
          (string) D_DISK_AFTER_DROP;
        }
      Open:
        if( self.has_been_opened == false )
        {
          self.has_been_opened = true;
          "~", (string) RandomAffirmative(),
          (string) D_DISK_AFTER_FIRST_OPEN;
        }
        else
        {
          "~", (string) RandomAffirmative(),
          (string) D_DISK_AFTER_OPEN;
        }
      Close:
        if( self.has_been_closed == false )
        {
          self.has_been_closed = true;
          print_ret (string) D_DISK_AFTER_FIRST_CLOSE;
        }
        else
        {
          "~", (string) RandomAffirmative(),
          (string) D_DISK_AFTER_CLOSE;
        }
    ];

Object DestructionDisk_Aperture "aperture" DestructionDisk
  with name 'aperture',
    description [; 
      if( parent(self) has open )
      {
        print_ret (string) D_DISK_APER_DESC_OPEN; 
      }
      else
      {
        print_ret (string) D_DISK_APER_DESC_CLOSED; 
      }
    ],
    before [;
      Open: << Open DestructionDisk >>;
      Close: << Close DestructionDisk >>;
    ];

Object -> DestructionDisk_Knob "knob"
  with name 'knob',
    description [; 
      if( parent(self) has open )
      {
        print_ret (string) D_DISK_KNOB_DESC_OPEN;
      }
      else
      {
        print_ret (string) D_DISK_KNOB_DESC_CLOSED;
      }
    ],
    before [;
      Push, Pull, Slide:
        if( DestructionDisk has open )
        {
          << Close DestructionDisk >>;
        }
        << Open DestructionDisk >>;
    ];
